

def flavor = "develop"
def Flavor = "Develop"

sonarqube {
    properties {

        def libraries = project.android.sdkDirectory.getPath() +
                "/platforms/android-28/android.jar" +
                "build/intermediates/exploded-aar/**/classes.jar"

        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectKey", "sonarqube"
        property "sonar.projectName", "sonarqube"
        property "sonar.projectVersion", AppVersion

        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/${flavor}/debug"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/${flavor}/debug"
        property "sonar.java.libraries", libraries


        property "sonar.tests", "src/test/java, src/androidTest/java"
        property "sonar.java.test.binaries", "build/intermediates/class/debug"
        property "sonar.java.test.libraries", libraries

        property "sonar.jacoco.reportPath", "build/jacoco/test/${Flavor}DebugUnitTest.exec"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/${flavor}Debug"
        property "sonar.android.lint.report", "build/outputs/lint-results-${flavor}Debug.xml"

    }

}

import org.gradle.internal.os.OperatingSystem;

task runSonar(type: Exec) {
    workingDir "./"
    def command = "../gradlew"
    if (OperatingSystem.current().isWindows()) {
        command = command + ".bat"
    }
    commandLine command, "clean", "assemble${Flavor}Debug", "lint${Flavor}Debug",
            "jacocoTest${Flavor}DebugUnitTestReport", "sonarqube"
}